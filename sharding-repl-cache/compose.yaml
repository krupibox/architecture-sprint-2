name: sharding-repl-cache
services:
  # сервер конфигурации
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - repl-config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  # 1-й шард
  shard1-node1:
    image: mongo:latest
    container_name: shard1-node1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - repl-shard1-node1-data:/data/db
    command:
      ["--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018"]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  shard1-node2:
    image: mongo:latest
    container_name: shard1-node2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - repl-shard1-node2-data:/data/db
    command:
      ["--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018"]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  shard1-node3:
    image: mongo:latest
    container_name: shard1-node3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - repl-shard1-node3-data:/data/db
    command:
      ["--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018"]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  # 2-й шард
  shard2-node1:
    image: mongo:latest
    container_name: shard2-node1
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - repl-shard2-node1-data:/data/db
    command:
      ["--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27019"]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  shard2-node2:
    image: mongo:latest
    container_name: shard2-node2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - repl-shard2-node2-data:/data/db
    command:
      ["--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27019"]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  shard2-node3:
    image: mongo:latest
    container_name: shard2-node3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - repl-shard2-node3-data:/data/db
    command:
      ["--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27019"]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  # роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27020",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  redis_service:
    image: "redis:latest"
    container_name: redis_service
    ports:
      - "6379:6379"
    volumes:
      - redis_service_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      app-network:
        ipv4_address: 173.17.0.20

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis_service:6379"
    networks:
      app-network:
        ipv4_address: 173.17.0.22

volumes:
  repl-config-data:
  repl-shard1-node1-data:
  repl-shard1-node2-data:
  repl-shard1-node3-data:
  repl-shard2-node1-data:
  repl-shard2-node2-data:
  repl-shard2-node3-data:
  redis_service_data:

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16